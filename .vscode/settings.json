{
    // Configure glob patterns of file associations to languages (for example `"*.extension": "html"`).
    // These have precedence over the default associations of the languages installed.
    "files.associations": {
        "*.tpp": "cpp",
        "*.kit": "toml",
        "*.rst": "restructuredtext"
    },
    "editor.rulers": [120],

    // Configure paths or glob patterns to exclude from file watching. E.g. ignored by linter.
    "files.watcherExclude": {
        "**/.git/objects/**": true,
        "**/.git/subtree-cache/**": true,
        "**/node_modules/**": true,
        "**/_isaac_sim/**": true,
        "**/_compiler/**": true
    },
    // Configuration for spelling checker
    "spellright.language": [
        "en-US-10-1."
    ],
    "spellright.documentTypes": [
        "markdown",
        "latex",
        "plaintext",
        "cpp",
        "asciidoc",
        "python",
        "restructuredtext"
    ],
    "cSpell.words": [
        "literalinclude",
        "linenos",
        "instanceable",
        "isaacSim",
        "jacobians",
        "pointcloud",
        "ridgeback",
        "rllib",
        "robomimic",
        "teleoperation",
        "xform",
        "numpy",
        "tensordict",
        "flatcache",
        "physx",
        "dpad",
        "gamepad",
        "linspace",
        "upsampled",
        "downsampled",
        "arange",
        "discretization",
        "trimesh",
        "uninstanceable",
        "configclass",
        "omni"
    ],
    // This enables python language server. Seems to work slightly better than jedi:
    "python.languageServer": "None",
    // We use "black" as a formatter:
    // "black-formatter.args": ["--line-length", "120",],
    // Use flake8 for linting
    // "flake8.args": ["--max-line-length", "120"],
    // Use docstring generator
    "autoDocstring.docstringFormat": "google",
    "autoDocstring.guessTypes": true,
    // Python environment path
    "python.envFile": "${workspaceFolder}/.vscode/.python.env",
    // Language specific settings
    "[restructuredtext]": {
        "editor.tabSize": 2
    },
    "cmake.ignoreCMakeListsMissing": true,
    "python.analysis.extraPaths": [
        "./rsl_rl",
        "./IsaacLab/source/isaaclab",
        "./IsaacLab/source/isaaclab_assets",
        "./IsaacLab/source/isaaclab_tasks",
        "./IsaacLab/source/isaaclab_rl",
        "./IsaacLab/source/isaaclab_mimic",
        "${env:HOME}/anaconda3/envs/ral2025/lib/python3.10/site-packages",
        "/opt/openrobots/lib/python3.10/site-packages"
    ],
    "terminal.integrated.env.linux": {
        "PYTHONPATH": "${env:HOME}/git/LearningHumanoidArmMotion-RAL2025-Code:${env:PYTHONPATH}",
        // "PATH": "/opt/openrobots/bin:${env:PATH}",
        // "PKG_CONFIG_PATH": "/opt/openrobots/lib/pkgconfig:${env:PKG_CONFIG_PATH}",
        // "LD_LIBRARY_PATH": "/opt/openrobots/lib:${env:LD_LIBRARY_PATH}",
        // "PYTHONPATH": "${env:HOME}/git/LearningHumanoidArmMotion-RAL2025-Code:/opt/openrobots/lib/python3.10/site-packages:${env:PYTHONPATH}",
        // "CMAKE_PREFIX_PATH": "/opt/openrobots:${env:CMAKE_PREFIX_PATH}"

    },
    "ros.distro": "noetic",
    "cursorpyright.analysis.extraPaths": [
        "./rsl_rl",
        "./IsaacLab/source/isaaclab",
        "./IsaacLab/source/isaaclab_assets",
        "./IsaacLab/source/isaaclab_tasks",
        "./IsaacLab/source/isaaclab_rl",
        "./IsaacLab/source/isaaclab_mimic",
        "${env:HOME}/anaconda3/envs/ral2025/lib/python3.10/site-packages",
        "/opt/openrobots/lib/python3.10/site-packages"
    ]

}
